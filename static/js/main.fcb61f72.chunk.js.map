{"version":3,"sources":["Components/NavBar/NavBar.js","Components/Post/Post.js","Components/Modal/Modal.js","App.js","index.js"],"names":["Navbar","id","Post","props","title","author","handleClick","onClick","className","Modal","post","visible","useEffect","document","querySelector","style","overflow","evt","preventDefault","target","currentTarget","closeModal","catchPhrase","body","App","useState","posts","setPosts","users","setUsers","currentPost","setCurrentPost","modalVisible","setModalVisible","getAuthorNameById","length","parseInt","name","val","userId","company","fetch","then","response","json","catch","console","log","map","index","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fcb61f72.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./NavBar.css\"\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav id=\"nav-wrap\">\r\n            <div id=\"nav-container\">\r\n                <h2 id=\"title-nav-bar\">Poster</h2>\r\n            </div>\r\n        </nav>\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Post.css';\r\n\r\nexport const Post = (props) => {\r\n    const title = props.title;\r\n    const author = props.author;\r\n\r\n    //Function from App.js that opens modal and sets it to current post\r\n    const handleClick = props.onClick;\r\n\r\n    return (\r\n        <li className=\"post-wrap\" onClick={handleClick}>\r\n            <div className=\"post-box-wrap\">\r\n                <h2 className=\"post-title\">{title}</h2>\r\n                <h4 className=\"post-author\">By: {author}</h4>\r\n            </div>\r\n        </li>\r\n    );\r\n\r\n};\r\n\r\n/* Ensures that props passed are of the mentioned type */\r\n/* Side Note: In TypeScript, this is taken care of, but not in JavaScript */\r\nPost.propTypes = {\r\n    title: PropTypes.string,\r\n    author: PropTypes.string\r\n};","import React, { useEffect } from 'react';\r\nimport { IoCloseOutline } from 'react-icons/io5'; //react-icons is a library for importing common icon designs easily\r\nimport \"./Modal.css\";\r\n\r\nexport const Modal = (props) => {\r\n\r\n    //post to be displayed on modal\r\n    const post = props.post;\r\n\r\n    //whether modal should be visible or not\r\n    const visible = props.visible;\r\n\r\n     /**\r\n     * If DOM element in evt.target is clicked (not including children), modal is closed\r\n     * @param {SyntheticEvent} evt object holding information about DOM element event handler is used on  \r\n     */\r\n    const closeOutsideModal = (evt) => {\r\n        evt.preventDefault();\r\n        if(visible && evt.target === evt.currentTarget) {\r\n            props.closeModal();\r\n        }\r\n    }\r\n\r\n    /* Whenever modal is open, the rest of scroll is turned off */\r\n    useEffect(() => {\r\n        const body = document.querySelector('body');\r\n        body.style.overflow = visible ? 'hidden' : 'auto';\r\n      }, [visible])\r\n\r\n    return (\r\n            <div id=\"whole-wrap\" className={visible ? \"\": \"hide\"} onClick={closeOutsideModal}>\r\n                <div id=\"modal-wrap\" >\r\n                    <div id = \"close-btn-wrap\">\r\n                        <IoCloseOutline id=\"close-btn\" onClick={props.closeModal}/>\r\n                    </div>\r\n                    <div id=\"post-container\">\r\n                        <h2 id=\"post-title\">{post.title}</h2>\r\n                        <h4 id=\"post-author\">By {post.author} \r\n                            <i id=\"post-phrase\">\"{post.catchPhrase}\"</i>\r\n                        </h4>\r\n            \r\n                        <div id=\"line-break-wrap\">\r\n                            <div id=\"line-break\"></div>\r\n                        </div>\r\n                        <p id =\"post-body\">{post.body}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n\r\n};\r\n","/* Importing necessary sub components for web app */\nimport React, { useState, useEffect } from 'react';\nimport { Navbar } from './Components/NavBar/NavBar';\nimport { Post } from './Components/Post/Post';\nimport { Modal } from './Components/Modal/Modal';\nimport './App.css';\n\n//Acts as a container for the posts, modal, and navigation bar\nfunction App() {\n\n  //Stores all the posts from the API\n  const [posts, setPosts] = useState([]);\n\n  //Stores all the users from the API\n  const [users, setUsers] = useState([]);\n\n  //Current post to be displayed on modal\n  const [currentPost, setCurrentPost] = useState({\n    title: \"\",\n    author: \"\",\n    catchPhrase: \"\",\n    body: \"\"\n  });\n\n  //Stores whether modal is visible or not\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const closeModal = () => {\n    setModalVisible(false);\n  };\n\n  const openModal = () => {\n    setModalVisible(true);\n  }\n\n  const requestPosts = () => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n    .then((response) => response.json())\n    .then((json) => setPosts(json))\n    .catch(() => console.log(\"error\"));\n  };\n\n  const requestUsers = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((json) => setUsers(json))\n    .catch(() => console.log(\"error\"));\n  }\n\n\n  /**\n   * Returns author name corresponding to user id\n   * @param {String} id  the userId returned from the API \n   */\n  const getAuthorNameById = (id) => {\n    id -= 1;\n    if(id >= users.length || id < 0) {\n      return \"\";\n    }\n    return users[parseInt(id)].name;\n  };\n\n  /**\n   * Returns author catch phrase corresponding to user id\n   * @param {String} id  the userId returned from the API \n   */\n  const getAuthorCatchPhraseById = (id) => {\n    id -= 1;\n    if(id >= users.length || id < 0) {\n      return \"\";\n    }\n    return users[parseInt(id)].company.catchPhrase;\n  };\n\n  /**\n   * Sets current post to post in val and opens modal\n   * @param {Object} val  post json object from API  \n   */\n  const handleClick = (val) => {\n    setCurrentPost({\n      title: val.title,\n      author: getAuthorNameById(val.userId),\n      catchPhrase: getAuthorCatchPhraseById(val.userId),\n      body: val.body\n    });\n\n    openModal();\n  };\n\n  //initial fetch from API\n  useEffect(() => {\n      requestPosts();\n      requestUsers();\n  }, []);\n\n  //returns nav, post list, and modal in that order\n  return (\n    <div className=\"body-wrap\">\n      <Navbar/>\n      <ul id=\"post-container-wrap\">\n\n        {posts.map((val, index) => {\n          return <Post \n                    key={index}\n                    title={val.title}\n                    author={getAuthorNameById(val.userId)}\n                    body={val.body}\n                    onClick={() => handleClick(val)}\n                  />\n        })}\n      </ul>\n      <Modal \n        post={currentPost}\n        visible={modalVisible}\n        closeModal={closeModal}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n/* This allows App.js to be rendered in root and */\n/* Basic styling for html, body, and the scrollbars are in ./App.cs */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}